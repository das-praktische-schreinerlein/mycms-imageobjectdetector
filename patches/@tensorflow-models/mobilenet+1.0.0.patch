patch-package
--- a/node_modules/@tensorflow-models/mobilenet/dist/index.d.ts
+++ b/node_modules/@tensorflow-models/mobilenet/dist/index.d.ts
@@ -1,13 +1,13 @@
 import * as tf from '@tensorflow/tfjs';
 export declare type MobileNetVersion = 1;
 export declare type MobileNetAlpha = 0.25 | 0.50 | 0.75 | 1.0;
-export declare function load(version?: MobileNetVersion, alpha?: MobileNetAlpha): Promise<MobileNet>;
+export declare function load(version?: MobileNetVersion, alpha?: MobileNetAlpha, optionalModelPath?: string): Promise<MobileNet>;
 export declare class MobileNet {
     version: string;
     alpha: string;
     model: tf.GraphModel;
     private normalizationOffset;
-    constructor(version: string, alpha: string);
+    constructor(version: string, alpha: string, optionalModelPath?: string);
     load(): Promise<void>;
     infer(img: tf.Tensor | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, embedding?: boolean): tf.Tensor;
     classify(img: tf.Tensor3D | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, topk?: number): Promise<Array<{
--- a/node_modules/@tensorflow-models/mobilenet/dist/index.js
+++ b/node_modules/@tensorflow-models/mobilenet/dist/index.js
@@ -35,7 +35,7 @@ var __generator = (this && this.__generator) || function (thisArg, body) {
     }
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-var tf = require("@tensorflow/tfjs");
+var tf = require("@tensorflow/tfjs-node");
 var imagenet_classes_1 = require("./imagenet_classes");
 var IMAGE_SIZE = 224;
 var EMBEDDING_NODES = {
@@ -55,7 +55,7 @@ var MODEL_INFO = {
         '1.00': 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2'
     }
 };
-function load(version, alpha) {
+function load(version, alpha, optionalModelPath) {
     if (version === void 0) { version = 1; }
     if (alpha === void 0) { alpha = 1.0; }
     return __awaiter(this, void 0, void 0, function () {
@@ -78,7 +78,7 @@ function load(version, alpha) {
                             "multipliers for this version are: " +
                             (Object.keys(MODEL_INFO[versionStr]) + "."));
                     }
-                    mobilenet = new MobileNet(versionStr, alphaStr);
+                    mobilenet = new MobileNet(versionStr, alphaStr, optionalModelPath);
                     return [4, mobilenet.load()];
                 case 1:
                     _a.sent();
@@ -89,10 +89,11 @@ function load(version, alpha) {
 }
 exports.load = load;
 var MobileNet = (function () {
-    function MobileNet(version, alpha) {
+    function MobileNet(version, alpha, optionalModelPath) {
         this.version = version;
         this.alpha = alpha;
         this.normalizationOffset = tf.scalar(127.5);
+        this.optionalModelPath = optionalModelPath;
     }
     MobileNet.prototype.load = function () {
         return __awaiter(this, void 0, void 0, function () {
@@ -101,9 +102,9 @@ var MobileNet = (function () {
             return __generator(this, function (_b) {
                 switch (_b.label) {
                     case 0:
-                        url = MODEL_INFO[this.version][this.alpha];
+                        url = (this.optionalModelPath || MODEL_INFO[this.version][this.alpha]);
                         _a = this;
-                        return [4, tf.loadGraphModel(url, { fromTFHub: true })];
+                        return [4, tf.loadGraphModel(url, { fromTFHub: !this.optionalModelPath })];
                     case 1:
                         _a.model = _b.sent();
                         result = tf.tidy(function () { return _this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])); });
--- a/node_modules/@tensorflow-models/mobilenet/dist/mobilenet.js
+++ b/node_modules/@tensorflow-models/mobilenet/dist/mobilenet.js
@@ -1,7 +1,7 @@
 // @tensorflow/tfjs-models Copyright 2019 Google
 (function (global, factory) {
-    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tensorflow/tfjs')) :
-    typeof define === 'function' && define.amd ? define(['exports', '@tensorflow/tfjs'], factory) :
+    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tensorflow/tfjs-node')) :
+    typeof define === 'function' && define.amd ? define(['exports', '@tensorflow/tfjs-node'], factory) :
     (global = global || self, factory(global.mobilenet = {}, global.tf));
 }(this, function (exports, tf) { 'use strict';
 
